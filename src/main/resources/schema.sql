-- Жанр
create table if not exists genre (
    genre_id integer generated by default as identity,
    genre_name varchar(255),
    constraint pk_genre_id primary key (genre_id)
);

-- Возрастной рейтинг
create table if not exists rating (
    rating_id integer generated by default as identity,
    rating_name varchar(255),
    rating_description varchar(255),
    constraint pk_rating_id primary key (rating_id)
);

-- Статус дружбы
create table if not exists friendshipstatus (
    friendshipstatus_id integer generated by default as identity,
    friendshipstatus_name varchar(255),
    constraint pk_friendshipstatus_id primary key (friendshipstatus_id)
);

-- Фильм
create table if not exists films (
    film_id integer generated by default as identity,
    film_name varchar(255),
    film_description varchar(255),
    film_releasedate timestamp,
    film_duration integer,
    rating_id integer,
    constraint pk_film_id primary key (film_id),
    constraint fk_film_rating foreign key (rating_id) references rating(rating_id)
);

-- Пользователь
create table if not exists users (
    user_id integer generated by default as identity,
    user_email varchar(100),
    user_login varchar(100),
    user_name varchar(100),
    user_birthday timestamp,
    constraint pk_user_id primary key (user_id)
);

-- Дружба
create table if not exists friendship (
    friendship_id integer generated by default as identity,
    user_id integer not null,
    user_fid integer not null,
    friendship_isconfirmed boolean default false,
    constraint pk_friendship_id primary key (friendship_id),
    constraint fk_friendship_user foreign key (user_id) references users(user_id),
    constraint fk_friendship_friend foreign key (user_fid) references users(user_id)
);

-- Лайки фильмов
create table if not exists filmlike (
    filmlike_id integer generated by default as identity,
    film_id integer not null,
    user_id integer not null,
    constraint pk_filmlike_id primary key (filmlike_id),
    constraint fk_filmlike_film foreign key (film_id) references films(film_id),
    constraint fk_filmlike_user foreign key (user_id) references users(user_id)
);

-- Жанры фильма
create table if not exists filmgenre (
    filmgenre_id integer generated by default as identity,
    film_id integer not null,
    genre_id integer not null,
    constraint pk_filmgenre_id primary key (filmgenre_id),
    constraint fk_filmgenre_film foreign key (film_id) references films(film_id),
    constraint fk_filmgenre_genre foreign key (genre_id) references genre(genre_id)
);